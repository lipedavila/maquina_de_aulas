/*
Este arquivo contém os dados agregados das páginas HTML processadas a partir de arquivos .js com HTML embutido.
Cada objeto no array 'toolsData' contém:
- id: Um identificador único
- fileName: O nome original do arquivo .js
- toolName: Nome da ferramenta (batizado pela IA)
- toolObjective: Objetivo principal (descrito pela IA)
- toolDescription: Breve descrição (descrita pela IA)
- fullHtmlContent: O conteúdo HTML completo da página original como string
*/

const toolsData = [
  {
    "id": "tool-1750037538629-8mp0hav",
    "fileName": "Hist_ria_Arte_R_pida.js",
    "toolName": "Gerador de Gibis IA",
    "toolObjective": "Transformar descrições textuais em histórias em quadrinhos visuais.",
    "toolDescription": "Uma ferramenta que utiliza inteligência artificial para gerar roteiros, painéis visuais, diálogos e onomatopeias, permitindo aos usuários criar gibis a partir de suas ideias de história.",
    "fullHtmlContent": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Gerador de Gibis com IA v2</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Bangers&family=Inter:wght@400;500;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        body {\n            font-family: 'Inter', sans-serif;\n        }\n        .comic-title, .comic-panel h3, .onomatopoeia-text {\n            font-family: 'Bangers', cursive;\n            letter-spacing: 2px;\n        }\n        .comic-panel-image, .dialogue-container {\n            position: relative;\n        }\n        .comic-panel-image {\n            aspect-ratio: 1 / 1;\n            background-color: #e5e7eb;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            overflow: hidden;\n        }\n        .spinner {\n            border: 4px solid rgba(0,0,0,0.1);\n            width: 3rem;\n            height: 3rem;\n            border-radius: 50%;\n            border-left-color: #4f46e5;\n            animation: spin 1s linear infinite;\n        }\n        @keyframes spin {\n            to { transform: rotate(360deg); }\n        }\n        .overlay-container {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.5);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            opacity: 0;\n            transition: opacity 0.3s ease;\n            pointer-events: none;\n        }\n        .comic-panel-image:hover .overlay-container,\n        .dialogue-container:hover .overlay-container {\n            opacity: 1;\n            pointer-events: auto;\n        }\n        .idea-btn {\n            background-color: #fde047; /* yellow-300 */\n            color: #ca8a04; /* yellow-600 */\n        }\n        .idea-btn:hover {\n            background-color: #facc15; /* yellow-400 */\n        }\n        .onomatopoeia-container {\n            position: absolute;\n            bottom: 10px;\n            right: 10px;\n            transform: rotate(-15deg);\n        }\n        .onomatopoeia-text {\n            font-size: 2.5rem;\n            color: #fef08a; /* yellow-200 */\n            -webkit-text-stroke: 2px #c2410c; /* orange-600 */\n            paint-order: stroke fill;\n            cursor: pointer;\n        }\n        .onomatopoeia-container:hover .overlay-container {\n            opacity: 1;\n            pointer-events: auto;\n        }\n    </style>\n</head>\n<body class=\"bg-gray-100 text-gray-800\">\n\n    <div class=\"container mx-auto p-4 md:p-8\">\n        <header class=\"text-center mb-10\">\n            <h1 class=\"text-5xl md:text-6xl font-bold comic-title text-indigo-600\">Gerador de Gibis com IA</h1>\n            <p class=\"text-lg text-gray-600 mt-2\">Dê vida às suas histórias em formato de gibi!</p>\n        </header>\n\n        <main>\n            <div id=\"config-panel\" class=\"bg-white p-8 rounded-2xl shadow-lg mb-10 max-w-4xl mx-auto\">\n                <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div class=\"md:col-span-2\">\n                        <div class=\"flex justify-between items-center mb-2\">\n                             <label for=\"story-input\" class=\"block text-lg font-semibold text-gray-700\">1. Descreva a história do seu gibi:</label>\n                             <button id=\"idea-btn\" class=\"text-sm idea-btn font-semibold py-1 px-3 rounded-full hover:shadow-md transition-all\">✨ Me Dê Ideias</button>\n                        </div>\n                        <textarea id=\"story-input\" rows=\"8\" class=\"w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition-shadow\" placeholder=\"Ex: Um astronauta perdido encontra um planeta habitado por robôs amigáveis que o ajudam a consertar sua nave...\"></textarea>\n                        <div id=\"ideas-container\" class=\"mt-2 space-y-2\"></div>\n                    </div>\n                    <div>\n                        <label for=\"panels-input\" class=\"block text-lg font-semibold text-gray-700 mb-2\">2. Escolha o número de painéis:</label>\n                        <input type=\"number\" id=\"panels-input\" value=\"4\" min=\"2\" max=\"12\" class=\"w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition-shadow\">\n                        <button id=\"generate-btn\" class=\"w-full mt-4 bg-indigo-600 text-white font-bold py-4 rounded-lg hover:bg-indigo-700 transition-all shadow-md hover:shadow-lg text-xl\">\n                            3. Gerar Gibi!\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <div id=\"status-panel\" class=\"text-center my-8 hidden\">\n                <div class=\"inline-block spinner\"></div>\n                <p id=\"status-text\" class=\"text-xl font-semibold text-gray-700 mt-4\"></p>\n            </div>\n            \n            <div id=\"comic-output\" class=\"bg-white p-4 md:p-8 rounded-2xl shadow-lg max-w-6xl mx-auto hidden\">\n                <!-- O gibi gerado aparecerá aqui -->\n            </div>\n\n            <div id=\"save-container\" class=\"text-center mt-10 hidden\">\n                <button id=\"save-btn\" class=\"bg-green-600 text-white font-bold py-4 px-10 rounded-lg hover:bg-green-700 transition-all shadow-md hover:shadow-lg text-xl\">\n                    Salvar Gibi\n                </button>\n            </div>\n        </main>\n    </div>\n\n    <script>\n        const storyInput = document.getElementById('story-input');\n        const panelsInput = document.getElementById('panels-input');\n        const generateBtn = document.getElementById('generate-btn');\n        const ideaBtn = document.getElementById('idea-btn');\n        const ideasContainer = document.getElementById('ideas-container');\n        const statusPanel = document.getElementById('status-panel');\n        const statusText = document.getElementById('status-text');\n        const comicOutput = document.getElementById('comic-output');\n        const saveContainer = document.getElementById('save-container');\n        const saveBtn = document.getElementById('save-btn');\n\n        const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';\n        const IMAGEN_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict';\n        const API_KEY = \"\"; // API key is handled by the environment\n        const MAX_RETRIES = 3; // For text generation retries\n        const MAX_IMAGE_RETRIES = 10; // For image generation retries, as requested\n        const CORS_PROXY = ''; // If a CORS proxy is needed, it would be configured here.\n\n        generateBtn.addEventListener('click', generateComic);\n        saveBtn.addEventListener('click', saveComic);\n        ideaBtn.addEventListener('click', generateStoryIdeas);\n\n        /**\n         * Main function to generate the comic book.\n         * Orchestrates script generation, title suggestions, and panel image creation.\n         */\n        async function generateComic() {\n            const story = storyInput.value.trim();\n            const numPanels = parseInt(panelsInput.value, 10);\n\n            if (!story) {\n                // Using a custom message box instead of alert() for better UX\n                showMessageBox(\"Por favor, escreva uma história para o seu gibi.\");\n                return;\n            }\n\n            // Reset UI\n            comicOutput.innerHTML = '';\n            comicOutput.classList.add('hidden');\n            saveContainer.classList.add('hidden');\n            ideasContainer.innerHTML = ''; // Clear previous ideas\n            statusPanel.classList.remove('hidden');\n            generateBtn.disabled = true;\n\n            try {\n                // Step 1: Generate comic script\n                statusText.textContent = \"Etapa 1: A IA está criando o roteiro...\";\n                const script = await generateScript(story, numPanels);\n\n                // Step 2: Generate title suggestions (this step is still called, but the output won't be displayed)\n                statusText.textContent = \"Etapa 2: A IA está sugerindo títulos...\";\n                const titleSuggestions = await generateTitleSuggestions(script); // Keep calling for potential future use or to not break the flow\n\n                // Display comic title\n                comicOutput.classList.remove('hidden');\n                \n                const comicTitle = document.createElement('h2');\n                comicTitle.textContent = script.title || \"Meu Gibi\";\n                comicTitle.className = \"text-4xl md:text-5xl font-bold text-center mb-2 comic-title text-gray-800\";\n                comicOutput.appendChild(comicTitle);\n\n                // Removed the code block that appends title suggestions to comicOutput\n                // if (titleSuggestions && titleSuggestions.length > 0) {\n                //     const suggestionsEl = document.createElement('div');\n                //     suggestionsEl.className = \"text-center text-sm text-gray-500 mb-8\";\n                //     suggestionsEl.innerHTML = `✨ Sugestões de Título: <em>${titleSuggestions.join(' / ')}</em>`;\n                //     comicOutput.appendChild(suggestionsEl);\n                // }\n\n                const panelsGrid = document.createElement('div');\n                panelsGrid.className = \"grid grid-cols-1 md:grid-cols-2 gap-8\";\n                comicOutput.appendChild(panelsGrid);\n\n                // Create placeholders for each panel\n                script.panels.forEach((panelData, index) => {\n                    const panelEl = createPanelPlaceholder(index + 1, panelData.dialogue, panelData.scene_description);\n                    panelsGrid.appendChild(panelEl);\n                });\n\n                // Step 3: Generate images for each panel sequentially\n                for (let i = 0; i < script.panels.length; i++) {\n                    const panelData = script.panels[i];\n                    const panelNumber = i + 1;\n                    statusText.textContent = `Etapa 3: Desenhando painel ${panelNumber} de ${script.panels.length}...`;\n                    await generateImageForPanel(panelData.scene_description, panelNumber);\n                }\n\n                // Finalize UI\n                statusPanel.classList.add('hidden');\n                saveContainer.classList.remove('hidden');\n\n            } catch (error) {\n                console.error(\"Erro ao gerar o gibi:\", error);\n                statusText.textContent = `Ocorreu um erro: ${error.message}`;\n                showMessageBox(`Ocorreu um erro durante a geração do gibi. Tente novamente. Detalhes: ${error.message}`);\n                statusPanel.classList.add('hidden');\n            } finally {\n                generateBtn.disabled = false;\n            }\n        }\n        \n        /**\n         * Generic API call function with error handling.\n         * @param {string} url - The API endpoint URL.\n         * @param {object} payload - The request payload.\n         * @param {string} agentName - A name for the agent making the call (for error logging).\n         * @returns {Promise<object>} - The JSON response from the API.\n         * @throws {Error} - If the API call fails.\n         */\n        async function apiCall(url, payload, agentName) {\n            // Prepend CORS proxy if configured, otherwise use direct URL\n            const fullUrl = `${CORS_PROXY}${url}?key=${API_KEY}`; \n            const response = await fetch(fullUrl, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(payload)\n            });\n            if (!response.ok) {\n                // Extract error details and include status for specific handling\n                const errorText = await response.text();\n                // Attach the status code to the error for specific handling in catch blocks\n                throw new Error(`(${agentName}) Falha na API: ${response.status} - ${errorText}`, { cause: response.status });\n            }\n            return await response.json();\n        }\n\n        /**\n         * Generates the comic script (title, scene descriptions, dialogues) based on the story.\n         * @param {string} story - The user's comic story.\n         * @param {number} numPanels - The desired number of panels.\n         * @returns {Promise<object>} - An object containing the comic title and panels data.\n         */\n        async function generateScript(story, numPanels) {\n            const prompt = `Você é um roteirista profissional de histórias em quadrinhos. Adapte a história para um gibi de ${numPanels} painéis. Para cada painel, crie uma descrição de cena detalhada e um diálogo/narração.\n                História: \"${story}\"\n                REGRAS: Crie um título impactante. A 'scene_description' deve ser visualmente rica. O 'dialogue' deve ser curto. Responda APENAS com um objeto JSON no formato: {\"title\": \"Título\", \"panels\": [{\"scene_description\": \"...\", \"dialogue\": \"...\"}]}`;\n            const payload = {\n                contents: [{ parts: [{ text: prompt }] }],\n                generationConfig: { responseMimeType: \"application/json\" }\n            };\n            const result = await apiCall(GEMINI_API_URL, payload, 'Roteirista');\n            return JSON.parse(result.candidates[0].content.parts[0].text);\n        }\n        \n        /**\n         * Enhances a scene description with artistic guidelines for image generation.\n         * @param {string} sceneDescription - The original scene description.\n         * @returns {Promise<string>} - The enhanced artistic prompt.\n         */\n        async function getArtisticPrompt(sceneDescription) {\n            const prompt = `Você é um Diretor de Arte de Gibis. Enriqueça a cena com diretrizes visuais consistentas.\n                Cena: \"${sceneDescription}\"\n                Framework Visual a Adicionar: Estilo de gibi moderno, vibrante, com linhas marcadas, iluminação dramática e cores saturadas. Enfatize a ação e emoções.\n                Saída: Forneça APENAS a nova descrição de cena aprimorada.`;\n            const payload = {\n                contents: [{ parts: [{ text: prompt }] }]\n            };\n            const result = await apiCall(GEMINI_API_URL, payload, 'Diretor de Arte');\n            return result.candidates[0].content.parts[0].text;\n        }\n\n        /**\n         * Generates alternative title suggestions for the comic.\n         * @param {object} script - The generated comic script.\n         * @returns {Promise<string[]>} - An array of title suggestions.\n         */\n        async function generateTitleSuggestions(script) {\n            try {\n                const prompt = `Baseado neste roteiro de gibi, sugira 3 títulos alternativos, criativos e impactantes.\n                    Roteiro: ${JSON.stringify(script)}\n                    Responda com um array JSON de strings. Ex: [\"Título 1\", \"Título 2\", \"Título 3\"]`;\n                const payload = {\n                    contents: [{ parts: [{ text: prompt }] }],\n                    generationConfig: { responseMimeType: \"application/json\" }\n                };\n                const result = await apiCall(GEMINI_API_URL, payload, 'Consultor de Títulos');\n                return JSON.parse(result.candidates[0].content.parts[0].text);\n            } catch (error) {\n                console.warn(\"Não foi possível gerar sugestões de título:\", error);\n                return []; // Return empty array if suggestions fail\n            }\n        }\n        \n        /**\n         * Generates a new dialogue or narration for a specific panel.\n         * @param {number} panelNumber - The number of the panel to update.\n         * @param {string} sceneDescription - The scene description of the panel.\n         * @param {HTMLElement} dialogueElement - The HTML element displaying the dialogue.\n         */\n        async function generateNewDialogue(panelNumber, sceneDescription, dialogueElement) {\n            const originalText = dialogueElement.textContent;\n            dialogueElement.textContent = \"Gerando...\";\n\n            try {\n                const story = storyInput.value.trim();\n                const prompt = `\n                    Você é um roteirista de gibis afiado e criativo. Sua tarefa é criar um diálogo ou narração alternativo para um único painel, com base no contexto geral da história e na cena visual.\n                    **Contexto Geral da História:** \"${story}\"\n                    **Descrição da Cena Visual deste Painel:** \"${sceneDescription}\"\n                    **Texto Atual (para referência, não repita):** \"${originalText}\"\n                    **Sua Missão:** Escreva um novo texto curto, impactante e adequado para um balão de diálogo ou caixa de narração.\n                    **Formato da Resposta:** Responda APENAS com o novo texto.\n                `;\n                const payload = { contents: [{ parts: [{ text: prompt }] }] };\n                const result = await apiCall(GEMINI_API_URL, payload, 'Roteirista de Diálogo');\n                const newDialogue = result.candidates[0].content.parts[0].text;\n                dialogueElement.textContent = newDialogue;\n            } catch (error) {\n                console.error(`Erro ao gerar novo diálogo para o painel ${panelNumber}:`, error);\n                showMessageBox(`Não foi possível gerar um novo texto. Tente novamente. Detalhes: ${error.message}`);\n                dialogueElement.textContent = originalText; // Revert to original text on error\n            }\n        }\n\n        /**\n         * Generates an onomatopoeia for a given panel scene.\n         * @param {number} panelNumber - The panel number.\n         * @param {string} sceneDescription - The scene description for context.\n         * @param {HTMLElement} imageContainer - The container for the panel image.\n         */\n        async function generateOnomatopoeia(panelNumber, sceneDescription, imageContainer) {\n            let onomatopoeiaContainer = imageContainer.querySelector('.onomatopoeia-container');\n            if(!onomatopoeiaContainer) {\n                onomatopoeiaContainer = document.createElement('div');\n                onomatopoeiaContainer.className = 'onomatopoeia-container';\n                imageContainer.appendChild(onomatopoeiaContainer);\n            }\n            onomatopoeiaContainer.innerHTML = `<div class=\"spinner !w-6 !h-6\"></div>`; // Show spinner while generating\n            \n            try {\n                const prompt = `Você é um especialista em onomatopeias de gibi. Baseado na descrição da cena, sugira uma onomatopeia curta e impactante (como 'POW!', 'ZAP!', 'BOOM!', 'VRUUUM').\n                Cena: \"${sceneDescription}\"\n                Se nenhuma onomatopeia for apropriada, responda com uma string vazia.\n                Responda APENAS com a onomatopaia.`;\n                const payload = { contents: [{ parts: [{ text: prompt }] }] };\n                const result = await apiCall(GEMINI_API_URL, payload, 'Especialista em Onomatopeia');\n\n                if (result.candidates && result.candidates[0] && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts[0]) {\n                    const onomatopoeia = result.candidates[0].content.parts[0].text.trim();\n                    if (onomatopoeia) {\n                        onomatopoeiaContainer.innerHTML = `<div class=\"onomatopoeia-text\">${onomatopoeia}</div>`;\n                        \n                        // Add overlay button to regenerate onomatopoeia\n                        const overlay = document.createElement('div');\n                        overlay.className = 'overlay-container';\n                        overlay.innerHTML = `<button class=\"bg-yellow-500 text-black font-bold py-1 px-2 rounded-lg hover:bg-yellow-400 transition-all shadow-md text-xs\">✨ Nova Onomatopeia</button>`;\n                        overlay.querySelector('button').addEventListener('click', (e) => {\n                            e.stopPropagation();\n                            generateOnomatopoeia(panelNumber, sceneDescription, imageContainer);\n                        });\n                        onomatopoeiaContainer.appendChild(overlay);\n                    } else {\n                        // If no onomatopoeia is appropriate, remove the container\n                        onomatopoeiaContainer.remove();\n                    }\n                } else {\n                    console.warn(\"Resposta da API de onomatopeia em formato inesperado.\");\n                    if(onomatopoeiaContainer) onomatopoeiaContainer.remove();\n                }\n\n            } catch (error) {\n                console.error(\"Não foi possível gerar onomatopaia:\", error);\n                if(onomatopoeiaContainer) onomatopoeiaContainer.remove(); // Remove on error\n            }\n        }\n\n        /**\n         * Generates and displays story ideas for the comic.\n         */\n        async function generateStoryIdeas() {\n            ideaBtn.disabled = true;\n            ideasContainer.innerHTML = `<div class=\"p-2 text-center text-sm text-gray-500\">✨ Buscando inspiração...</div>`;\n            try {\n                const prompt = `Me dê 5 ideias curtas e criativas para uma história em quadrinhos. As ideias devem ser de uma frase cada.\n                Responda com um array JSON de strings. Ex: [\"Ideia 1\", \"Ideia 2\", \"Ideia 3\", \"Ideia 4\", \"Ideia 5\"]`;\n                const payload = {\n                    contents: [{ parts: [{ text: prompt }] }],\n                    generationConfig: { responseMimeType: \"application/json\" }\n                };\n                const result = await apiCall(GEMINI_API_URL, payload, 'Gerador de Ideias');\n                const ideas = JSON.parse(result.candidates[0].content.parts[0].text);\n\n                ideasContainer.innerHTML = ''; // Clear spinner\n                ideas.forEach(idea => {\n                    const button = document.createElement('button');\n                    button.textContent = `Usar: \"${idea}\"`;\n                    button.className = \"w-full text-left text-sm p-2 bg-indigo-50 hover:bg-indigo-100 rounded-md transition-colors\";\n                    button.onclick = () => {\n                        storyInput.value = idea;\n                        ideasContainer.innerHTML = ''; // Clear ideas after selection\n                    };\n                    ideasContainer.appendChild(button);\n                });\n            } catch (error) {\n                ideasContainer.innerHTML = `<div class=\"p-2 text-center text-sm text-red-500\">Erro ao buscar ideias.</div>`;\n                console.error(\"Erro ao gerar ideias:\", error);\n            } finally {\n                ideaBtn.disabled = false;\n            }\n        }\n\n        /**\n         * Creates a placeholder HTML structure for a comic panel.\n         * @param {number} panelNumber - The panel number.\n         * @param {string} dialogue - The dialogue for the panel.\n         * @param {string} sceneDescription - The scene description for the panel.\n         * @returns {HTMLElement} - The created panel element.\n         */\n        function createPanelPlaceholder(panelNumber, dialogue, sceneDescription) {\n            const panelEl = document.createElement('div');\n            panelEl.id = `panel-${panelNumber}`;\n            panelEl.className = \"comic-panel border-4 border-gray-900 rounded-lg p-4 bg-white flex flex-col\";\n            \n            const imageContainer = document.createElement('div');\n            imageContainer.id = `image-container-${panelNumber}`;\n            imageContainer.className = \"comic-panel-image border-2 border-gray-400 border-dashed rounded-md flex-grow\";\n            imageContainer.innerHTML = `<p class=\"font-semibold text-gray-600\">Painel ${panelNumber}: Carregando Imagem...</p>`; // Initial loading text\n            \n            const dialogueContainer = document.createElement('div');\n            dialogueContainer.className = \"dialogue-container mt-4 relative\";\n\n            const dialogueEl = document.createElement('p');\n            dialogueEl.className = \"text-center text-lg font-medium p-3 bg-yellow-100 border-2 border-gray-900 rounded-lg shadow-inner\";\n            dialogueEl.textContent = dialogue || \" \"; // Display dialogue or empty space\n\n            const editDialogueContainer = document.createElement('div');\n            editDialogueContainer.className = 'overlay-container';\n            editDialogueContainer.innerHTML = `<button class=\"bg-purple-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-purple-700 transition-all shadow-md\">✏️ Gerar Novo Texto</button>`;\n            editDialogueContainer.querySelector('button').addEventListener('click', (e) => {\n                e.stopPropagation(); // Prevent click from bubbling up\n                generateNewDialogue(panelNumber, sceneDescription, dialogueEl);\n            });\n\n            dialogueContainer.appendChild(dialogueEl);\n            dialogueContainer.appendChild(editDialogueContainer);\n\n            panelEl.appendChild(imageContainer);\n            panelEl.appendChild(dialogueContainer);\n            \n            return panelEl;\n        }\n        \n        /**\n         * Generates an image for a specific comic panel using the Imagen API.\n         * Includes retry logic and specific handling for 401/403 errors.\n         * @param {string} sceneDescription - The scene description for the image.\n         * @param {number} panelNumber - The number of the panel to update.\n         */\n        async function generateImageForPanel(sceneDescription, panelNumber) {\n            const imageContainer = document.getElementById(`image-container-${panelNumber}`);\n            if (!imageContainer) return;\n\n            for (let attempt = 1; attempt <= MAX_IMAGE_RETRIES; attempt++) {\n                try {\n                    // Show loading state\n                    imageContainer.innerHTML = `<div class=\"spinner\"></div><p class=\"ml-4 font-semibold text-gray-600\">Desenhando painel ${panelNumber} (Tentativa ${attempt}/${MAX_IMAGE_RETRIES})...</p>`;\n                    imageContainer.classList.add('border-dashed', 'bg-gray-200');\n                    imageContainer.classList.remove('border-black', 'border-red-500'); // Clean previous border styles\n\n                    const artisticPrompt = await getArtisticPrompt(sceneDescription);\n                    \n                    const payload = {\n                        instances: [{ prompt: artisticPrompt }],\n                        parameters: { \"sampleCount\": 1 }\n                    };\n                    const result = await apiCall(IMAGEN_API_URL, payload, 'Ilustrador');\n                    \n                    if (result.predictions && result.predictions[0]?.bytesBase64Encoded) {\n                        const imageUrl = `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;\n                        imageContainer.innerHTML = `<img src=\"${imageUrl}\" alt=\"${sceneDescription}\" class=\"w-full h-full object-cover rounded-md\">`;\n                        \n                        // Add \"Generate Again\" button overlay\n                        const retryContainer = document.createElement('div');\n                        retryContainer.className = 'overlay-container';\n                        retryContainer.innerHTML = `<button class=\"bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-700 transition-all shadow-md\">✨ Gerar Novamente</button>`;\n                        retryContainer.querySelector('button').addEventListener('click', (e) => {\n                            e.stopPropagation();\n                            generateImageForPanel(sceneDescription, panelNumber);\n                        });\n                        imageContainer.appendChild(retryContainer);\n\n                        // Add onomatopoeia container (if it doesn't exist, create it)\n                        let onomatopoeiaContainer = imageContainer.querySelector('.onomatopoeia-container');\n                        if (!onomatopoeiaContainer) {\n                            onomatopoeiaContainer = document.createElement('div');\n                            onomatopoeiaContainer.className = 'onomatopoeia-container';\n                            imageContainer.appendChild(onomatopoeiaContainer);\n                        }\n                        \n                        imageContainer.classList.remove('border-dashed', 'bg-gray-200');\n                        imageContainer.classList.add('border-black'); // Solid border on success\n\n                        // Generate onomatopoeia after image is loaded\n                        generateOnomatopoeia(panelNumber, sceneDescription, imageContainer);\n                        \n                        return; // Image generated successfully, exit the loop\n                    } else {\n                        throw new Error(`Resposta da API não continha imagem.`, { cause: 'no_image_data' });\n                    }\n                } catch(error) {\n                    console.error(`Falha ao gerar imagem para o painel ${panelNumber} (Tentativa ${attempt}):`, error);\n                    \n                    const isAuthorizationError = (error.cause === 401 || error.cause === 403);\n\n                    if (attempt < MAX_IMAGE_RETRIES) {\n                        // Not the last retry, show message and potentially delay, then try again automatically\n                        imageContainer.innerHTML = `<div class=\"spinner\"></div><p class=\"ml-4 font-semibold text-gray-600\">Erro ao desenhar painel ${panelNumber}. Tentando novamente... (Tentativa ${attempt + 1}/${MAX_IMAGE_RETRIES})</p>`;\n                        if (isAuthorizationError) {\n                            // Introduce a 2-second delay for authorization errors before retrying\n                            await new Promise(resolve => setTimeout(resolve, 2000));\n                        }\n                    } else {\n                        // Last retry failed, display permanent \"Gerar Novamente\" button instead of crashing\n                        imageContainer.innerHTML = `\n                            <div class=\"text-center p-4 flex flex-col items-center justify-center\">\n                                <p class=\"text-red-600 font-semibold mb-2\">Não foi possível desenhar o painel ${panelNumber}.</p>\n                                <p class=\"text-xs text-gray-500 mb-4\">Detalhes: ${error.message}</p>\n                                <button class=\"bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-700 transition-all shadow-md\">✨ Gerar Novamente</button>\n                            </div>`;\n                        imageContainer.classList.remove('border-dashed', 'bg-gray-200');\n                        imageContainer.classList.add('border-red-500'); // Indicate error visually\n                        // Attach event listener for manual retry\n                        imageContainer.querySelector('button').addEventListener('click', (e) => {\n                            e.stopPropagation();\n                            generateImageForPanel(sceneDescription, panelNumber);\n                        });\n                        return; // Stop automatic retries and wait for user interaction\n                    }\n                }\n            }\n        }\n\n        /**\n         * Saves the generated comic as an HTML file.\n         * Removes interactive elements (overlays) before saving for a clean export.\n         */\n        function saveComic() {\n            // Clone the comic output to remove interactive elements before saving\n            const comicToSave = comicOutput.cloneNode(true);\n            comicToSave.querySelectorAll('.overlay-container').forEach(el => el.remove());\n            const comicContent = comicToSave.innerHTML;\n            const title = comicOutput.querySelector('h2')?.textContent || \"meu-gibi\";\n\n            const htmlContent = `\n                <!DOCTYPE html>\n                <html lang=\"pt-BR\">\n                <head>\n                    <meta charset=\"UTF-8\">\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                    <title>${title}</title>\n                    <script src=\"https://cdn.tailwindcss.com\"><\\/script>\n                    <link href=\"https://fonts.googleapis.com/css2?family=Bangers&family=Inter:wght@400;500;700&display=swap\" rel=\"stylesheet\">\n                    <style>\n                        body { font-family: 'Inter', sans-serif; background-color: #f9fafb; padding: 2rem; }\n                        .comic-title, .comic-panel h3, .onomatopoeia-text { font-family: 'Bangers', cursive; letter-spacing: 2px; }\n                        .comic-panel-image { position: relative; aspect-ratio: 1 / 1; }\n                        .onomatopoeia-container { position: absolute; bottom: 10px; right: 10px; transform: rotate(-15deg); }\n                        .onomatopoeia-text { font-size: 2.5rem; color: #fef08a; -webkit-text-stroke: 2px #c2410c; paint-order: stroke fill; }\n                    </style>\n                </head>\n                <body class=\"bg-gray-50\">\n                    <div class=\"max-w-6xl mx-auto\">\n                        ${comicContent}\n                    </div>\n                </body>\n                </html>\n            `;\n\n            const blob = new Blob([htmlContent], { type: 'text/html' });\n            const link = document.createElement('a');\n            link.href = URL.createObjectURL(blob);\n            link.download = `${title.toLowerCase().replace(/[^a-z0-9]/gi, '_')}.html`;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            URL.revokeObjectURL(link.href);\n        }\n\n        /**\n         * Custom message box function to replace alert().\n         * Displays a modal-like message to the user.\n         * @param {string} message - The message to display.\n         */\n        function showMessageBox(message) {\n            const messageBox = document.createElement('div');\n            messageBox.className = \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\";\n            messageBox.innerHTML = `\n                <div class=\"bg-white p-6 rounded-lg shadow-xl max-w-sm w-full text-center\">\n                    <p class=\"text-lg font-semibold mb-4\">${message}</p>\n                    <button id=\"messageBoxClose\" class=\"bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-700 transition-all\">OK</button>\n                </div>\n            `;\n            document.body.appendChild(messageBox);\n\n            document.getElementById('messageBoxClose').addEventListener('click', () => {\n                messageBox.remove();\n            });\n        }\n    </script>\n</body>\n</html>\n"
  },
  {
    "id": "tool-1750037544109-5z9ev24",
    "fileName": "Corretor_ENEM_Completo.js",
    "toolName": "Redação Nota Mil",
    "toolObjective": "Oferecer correção e análise detalhada de redações do ENEM usando Inteligência Artificial.",
    "toolDescription": "Permite enviar redações manuscritas (via foto) ou digitadas para uma análise completa de acordo com as competências do ENEM, incluindo avaliação gramatical, estrutural e sugestões de melhoria.",
    "fullHtmlContent": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Redação Nota Mil - Corretor IA para ENEM</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        body {\n            font-family: 'Inter', sans-serif;\n        }\n        .loader {\n            border: 8px solid #f3f3f3;\n            border-top: 8px solid #3b82f6;\n            border-radius: 50%;\n            width: 60px;\n            height: 60px;\n            animation: spin 1s linear infinite;\n        }\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n        .fade-in {\n            animation: fadeInAnimation 1s ease-in-out;\n        }\n        @keyframes fadeInAnimation {\n            from { opacity: 0; transform: translateY(20px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        textarea::-webkit-scrollbar {\n            width: 8px;\n        }\n        textarea::-webkit-scrollbar-track {\n            background: #f1f1f1;\n            border-radius: 10px;\n        }\n        textarea::-webkit-scrollbar-thumb {\n            background: #888;\n            border-radius: 10px;\n        }\n        textarea::-webkit-scrollbar-thumb:hover {\n            background: #555;\n        }\n        #brainstormModal.hidden, #imageUploadSection.hidden {\n            display: none;\n        }\n        /* Estilos para os diagramas */\n        .diagram-connector {\n            flex-grow: 1;\n            border-bottom: 2px dashed #9ca3af;\n            min-width: 20px;\n        }\n        .diagram-box {\n            border: 2px solid #6b7280;\n            background-color: #f9fafb;\n        }\n    </style>\n</head>\n<body class=\"bg-slate-50 text-slate-800\">\n\n    <div class=\"container mx-auto max-w-5xl p-4 sm:p-8\">\n        <header class=\"text-center mb-8\">\n            <h1 class=\"text-4xl sm:text-5xl font-bold text-blue-600\">Aula Total - Redação Nota Mil</h1>\n            <p class=\"text-slate-500 mt-2 text-lg\">Envie uma foto da sua redação manuscrita ou digite o texto para uma correção completa com IA.</p>\n        </header>\n\n        <main id=\"mainContent\" class=\"bg-white p-6 sm:p-8 rounded-2xl shadow-lg border border-slate-200\">\n            <div id=\"inputSection\">\n                <!-- Seção de Upload de Imagem -->\n                <div id=\"imageUploadSection\" class=\"mb-6\">\n                    <label for=\"image-upload-input\" class=\"w-full cursor-pointer bg-white border-2 border-dashed border-slate-300 rounded-xl flex flex-col items-center justify-center p-8 text-center hover:bg-slate-50 hover:border-blue-500 transition\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-12 w-12 text-slate-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"1.5\">\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z\" />\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15 13a3 3 0 11-6 0 3 3 0 016 0z\" />\n                        </svg>\n                        <p class=\"mt-3 font-semibold text-slate-700\">Enviar Foto da Redação</p>\n                        <p class=\"text-sm text-slate-500\">Clique aqui ou arraste o arquivo</p>\n                    </label>\n                    <input type=\"file\" id=\"image-upload-input\" class=\"hidden\" accept=\"image/*\">\n                </div>\n                \n                <div id=\"imagePreviewSection\" class=\"hidden mb-6 text-center\">\n                    <img id=\"imagePreview\" class=\"max-h-80 w-auto mx-auto rounded-lg border border-slate-200 shadow-sm\" alt=\"Pré-visualização da redação\">\n                    <div id=\"ocrLoader\" class=\"text-center hidden py-4\">\n                        <div class=\"loader mx-auto w-10 h-10 border-4\"></div>\n                        <p class=\"text-sm mt-3 text-slate-500 font-medium\">Reconhecendo sua caligrafia... Por favor, aguarde.</p>\n                    </div>\n                     <button id=\"clearImageBtn\" class=\"mt-4 text-sm text-red-600 hover:text-red-800 font-semibold\">Remover Imagem</button>\n                </div>\n\n                <!-- Campo para o Tema da Redação -->\n                <div class=\"mb-4\">\n                    <label for=\"essay-theme-input\" class=\"block text-xl font-semibold text-slate-700 mb-2\">Tema da Redação</label>\n                    <div class=\"flex items-center gap-3\">\n                        <input type=\"text\" id=\"essay-theme-input\" class=\"w-full p-3 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300\" placeholder=\"Digite o tema proposto ou gere um novo\">\n                        <button id=\"generate-theme-btn\" class=\"flex-shrink-0 bg-teal-500 text-white font-bold py-3 px-4 rounded-xl hover:bg-teal-600 transition focus:outline-none focus:ring-2 focus:ring-teal-300\">\n                            ✨ Gerar\n                        </button>\n                    </div>\n                </div>\n                \n                <!-- Campo para o Texto da Redação -->\n                <div class=\"mb-6\">\n                    <label for=\"essay-text\" class=\"block text-xl font-semibold text-slate-700 mb-2\">Texto da Redação</label>\n                    <textarea id=\"essay-text\" rows=\"15\" class=\"w-full p-4 border border-slate-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300 resize-none\" placeholder=\"O texto da sua redação aparecerá aqui após o envio da imagem, ou você pode digitar/colar diretamente...\"></textarea>\n                </div>\n                \n                <div class=\"mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <button id=\"brainstorm-btn\" class=\"w-full bg-purple-600 text-white font-bold py-3 px-4 rounded-xl hover:bg-purple-700 transition-transform transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-purple-300 shadow-md disabled:bg-slate-300 disabled:cursor-not-allowed disabled:transform-none\" disabled>\n                        ✨ Brainstorm de Argumentos\n                    </button>\n                    <button id=\"submit-btn\" class=\"w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-xl hover:bg-blue-700 transition-transform transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 shadow-md\">\n                        Corrigir Redação Completa\n                    </button>\n                </div>\n            </div>\n            \n            <div id=\"loadingSection\" class=\"text-center py-20 hidden\">\n                <div class=\"loader mx-auto\"></div>\n                <p class=\"mt-6 text-lg text-slate-600 font-medium\">Analisando sua redação... A IA está avaliando cada detalhe!</p>\n            </div>\n            \n            <div id=\"reportSection\" class=\"hidden fade-in\"></div>\n        </main>\n        \n        <footer class=\"text-center mt-8 text-slate-400 text-sm\">\n            <p>&copy; 2025 Redação Nota Mil. Todos os direitos reservados.</p>\n        </footer>\n    </div>\n    \n    <div id=\"brainstormModal\" class=\"hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4\">\n        <div id=\"brainstormContent\" class=\"bg-white rounded-2xl shadow-xl p-6 sm:p-8 max-w-2xl w-full max-h-[90vh] overflow-y-auto transform transition-all scale-95 opacity-0\"></div>\n    </div>\n\n    <script>\n        const API_KEY = \"\";\n        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;\n        \n        // --- ELEMENTOS DA UI ---\n        const inputSection = document.getElementById('inputSection');\n        const loadingSection = document.getElementById('loadingSection');\n        const reportSection = document.getElementById('reportSection');\n        const essayText = document.getElementById('essay-text');\n        const essayThemeInput = document.getElementById('essay-theme-input');\n        \n        // Elementos de Upload\n        const imageUploadInput = document.getElementById('image-upload-input');\n        const imageUploadSection = document.getElementById('imageUploadSection');\n        const imagePreviewSection = document.getElementById('imagePreviewSection');\n        const imagePreview = document.getElementById('imagePreview');\n        const ocrLoader = document.getElementById('ocrLoader');\n        const clearImageBtn = document.getElementById('clearImageBtn');\n\n        // Botões\n        const submitBtn = document.getElementById('submit-btn');\n        const generateThemeBtn = document.getElementById('generate-theme-btn');\n        const brainstormBtn = document.getElementById('brainstorm-btn');\n        const brainstormModal = document.getElementById('brainstormModal');\n        const brainstormContent = document.getElementById('brainstormContent');\n        \n        // --- LÓGICA DE UPLOAD E OCR ---\n        imageUploadInput.addEventListener('change', (event) => {\n            const file = event.target.files[0];\n            if (file && file.type.startsWith('image/')) {\n                handleImageFile(file);\n            }\n        });\n\n        clearImageBtn.addEventListener('click', () => {\n            imageUploadInput.value = '';\n            imagePreview.src = '';\n            imagePreviewSection.classList.add('hidden');\n            imageUploadSection.classList.remove('hidden');\n            essayText.value = '';\n            essayText.disabled = false;\n        });\n\n        async function handleImageFile(file) {\n            imageUploadSection.classList.add('hidden');\n            imagePreviewSection.classList.remove('hidden');\n            ocrLoader.classList.remove('hidden');\n            essayText.value = '';\n            essayText.disabled = true;\n\n            const reader = new FileReader();\n            reader.onloadend = async () => {\n                const base64Data = reader.result.split(',')[1];\n                imagePreview.src = reader.result;\n                try {\n                    const transcribedText = await callGeminiForOcr(base64Data);\n                    essayText.value = transcribedText;\n                } catch (error) {\n                    console.error(\"Erro no OCR:\", error);\n                    alert(\"Não foi possível reconhecer o texto na imagem. Tente uma foto com melhor iluminação e foco.\");\n                    essayText.value = \"Erro ao ler a imagem.\";\n                } finally {\n                    ocrLoader.classList.add('hidden');\n                    essayText.disabled = false;\n                    essayText.dispatchEvent(new Event('input'));\n                }\n            };\n            reader.readAsDataURL(file);\n        }\n\n        async function callGeminiForOcr(base64ImageData) {\n            const prompt = `Você é um sistema de Reconhecimento Óptico de Caracteres (OCR) altamente especializado em transcrever caligrafia humana, especialmente textos em português do Brasil. Sua única tarefa é extrair o texto da imagem fornecida da forma mais fiel possível. Ignore completamente as linhas do papel, borrões ou qualquer elemento que não seja texto. Não adicione nenhuma formatação, comentário ou nota. Retorne apenas e somente o texto transcrito.`;\n            const payload = { contents: [{ parts: [{ text: prompt }, { inline_data: { mime_type: \"image/jpeg\", data: base64ImageData } }] }] };\n            const response = await fetch(API_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });\n            if (!response.ok) throw new Error(`API error: ${response.statusText}`);\n            const result = await response.json();\n            if (result.candidates && result.candidates[0]?.content?.parts[0]?.text) {\n                return result.candidates[0].content.parts[0].text;\n            }\n            throw new Error(\"A API não retornou texto.\");\n        }\n\n        // --- LÓGICA PRINCIPAL ---\n        essayThemeInput.addEventListener('input', () => {\n            brainstormBtn.disabled = essayThemeInput.value.trim().length < 10;\n        });\n\n        submitBtn.addEventListener('click', async () => {\n            const theme = essayThemeInput.value;\n            const text = essayText.value;\n            if (theme.trim().length < 5) {\n                alert('Por favor, insira o tema da redação para uma correção precisa.');\n                essayThemeInput.focus();\n                return;\n            }\n            if (text.trim().split(' ').length < 50) {\n                alert('Por favor, insira uma redação com pelo menos 50 palavras para uma análise completa.');\n                return;\n            }\n            inputSection.classList.add('hidden');\n            loadingSection.classList.remove('hidden');\n            reportSection.innerHTML = '';\n            reportSection.classList.add('hidden');\n            try {\n                const result = await callGeminiForCorrection(text, theme);\n                renderReport(result);\n            } catch (error) {\n                console.error(\"Erro ao chamar a API de correção:\", error);\n                renderError('Não foi possível analisar sua redação no momento.');\n            } finally {\n                loadingSection.classList.add('hidden');\n                reportSection.classList.remove('hidden');\n            }\n        });\n        \n        generateThemeBtn.addEventListener('click', async () => {\n            essayThemeInput.value = \"Gerando um tema, aguarde...\";\n            essayThemeInput.disabled = true;\n            essayText.value = \"\";\n            essayText.disabled = true;\n            try {\n                const result = await callGeminiForTheme();\n                renderTheme(result);\n            } catch (error) {\n                console.error(\"Erro ao gerar tema:\", error);\n                essayThemeInput.value = \"Erro ao gerar tema. Tente novamente.\";\n            } finally {\n                 essayThemeInput.disabled = false;\n                 essayText.disabled = false;\n                 essayThemeInput.dispatchEvent(new Event('input'));\n            }\n        });\n\n        brainstormBtn.addEventListener('click', async () => {\n            const theme = essayThemeInput.value;\n            brainstormModal.classList.remove('hidden');\n            setTimeout(() => brainstormContent.classList.remove('scale-95', 'opacity-0'), 10);\n            brainstormContent.innerHTML = `<div class=\"text-center py-8\"><div class=\"loader mx-auto\"></div><p class=\"mt-4 text-slate-600 font-medium\">Buscando ideias para o tema...</p></div>`;\n            try {\n                const result = await callGeminiForArguments(theme);\n                renderArguments(result);\n            } catch(error) {\n                console.error(\"Erro no brainstorm:\", error);\n                brainstormContent.innerHTML = renderGenericModalError(\"Não foi possível gerar as ideias.\");\n            }\n        });\n\n        brainstormModal.addEventListener('click', (e) => {\n            if (e.target.id === 'brainstormModal' || e.target.classList.contains('close-modal-btn')) {\n                brainstormContent.classList.add('scale-95', 'opacity-0');\n                setTimeout(() => brainstormModal.classList.add('hidden'), 300);\n            }\n        });\n\n        // --- CHAMADAS DE API ---\n        async function callApiWithSchema(payload) {\n             const response = await fetch(API_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });\n            if (!response.ok) throw new Error(`API error: ${response.statusText}`);\n            const result = await response.json();\n            if (result.candidates && result.candidates[0]?.content?.parts[0]?.text) {\n              return JSON.parse(result.candidates[0].content.parts[0].text);\n            }\n            throw new Error(\"Resposta da API inválida ou vazia.\");\n        }\n        \n        async function callGeminiForTheme() {\n            const prompt = `Você é um especialista em criar temas para o ENEM. Crie um tema de redação desafiador e relevante para a realidade brasileira em 2025, seguindo o padrão do INEP. Sua resposta DEVE SER ESTRITAMENTE um objeto JSON contendo apenas a chave \"tema\".`;\n            const schema = {\n                type: \"OBJECT\",\n                properties: {\n                    tema: { type: \"STRING\" }\n                },\n                required: [\"tema\"]\n            };\n            const payload = {\n                contents: [{ role: \"user\", parts: [{ text: prompt }] }],\n                generationConfig: { responseMimeType: \"application/json\", responseSchema: schema }\n            };\n            return callApiWithSchema(payload);\n        }\n\n        async function callGeminiForArguments(theme) {\n            const prompt = `Você é um professor de redação especialista em argumentação para o ENEM. Para o tema de redação fornecido, desenvolva três possíveis linhas argumentativas. Para cada linha, sugira um repertório sociocultural relevante. Tema: \"${theme}\". Sua resposta DEVE SER ESTRITAMENTE um objeto JSON.`;\n            const schema = {type: \"ARRAY\",items: {type: \"OBJECT\",properties: {argumento: { type: \"STRING\" },repertorio: { type: \"STRING\" }},required: [\"argumento\", \"repertorio\"]}};\n            const payload = {contents: [{ role: \"user\", parts: [{ text: prompt }] }],generationConfig: { responseMimeType: \"application/json\", responseSchema: schema }};\n            return callApiWithSchema(payload);\n        }\n        \n        async function callGeminiForCorrection(essay, theme) {\n            const prompt = `Você é um avaliador especialista em redações do ENEM (INEP 2025). Analise a redação e retorne um objeto JSON. O tema da redação é: \"${theme}\". Avalie a aderência da redação a este tema específico. AVALIAÇÃO PADRÃO: pontuação (0-200) para as 5 competências; feedback de Pontos Fortes e a Melhorar; análise de desvios gramaticais; resumo geral. NOVA ANÁLISE - ARQUITETURA DA ARGUMENTAÇÃO: Crie um card com este título. Dentro dele: 1. 'Resumo da Tese': explique o que a redação tentou defender em relação ao tema. 2. 'Diagrama do Mapa da Tese': defina a tese central e liste os 2 ou 3 argumentos principais que a sustentam. 3. 'Diagrama dos Pilares da Argumentação': resuma cada parágrafo argumentativo em um 'pilar'. 4. 'Diagrama do Espectro do Ideário': analise a perspectiva (ideário) que fundamenta o texto. Redação: --- ${essay} --- Sua resposta DEVE SER ESTRITAMENTE um objeto JSON.`;\n            const schema = {\n                type: \"OBJECT\",\n                properties: {\n                    nota_final: { type: \"NUMBER\" },\n                    resumo_geral: { type: \"STRING\" },\n                    competencias: { type: \"ARRAY\", items: { type: \"OBJECT\", properties: { id: { type: \"NUMBER\" }, nota: { type: \"NUMBER\" }, feedback: { type: \"OBJECT\", properties: { pontos_fortes: { type: \"STRING\" }, pontos_a_melhorar: { type: \"STRING\" } } } } } },\n                    analise_gramatical: { type: \"OBJECT\", properties: { tipos_erros: { type: \"ARRAY\", items: { type: \"OBJECT\", properties: { tipo: { type: \"STRING\" }, quantidade: { type: \"NUMBER\" } } } } } },\n                    arquitetura_argumentacao: {\n                        type: \"OBJECT\",\n                        properties: {\n                            titulo: { type: \"STRING\" },\n                            resumo_tese: { type: \"STRING\" },\n                            diagrama_tese: { type: \"OBJECT\", properties: { tese_central: { type: \"STRING\" }, argumentos_principais: { type: \"ARRAY\", items: { type: \"STRING\" } } } },\n                            diagrama_pilares: { type: \"ARRAY\", items: { type: \"OBJECT\", properties: { pilar: { type: \"STRING\" }, resumo_pilar: { type: \"STRING\" } } } },\n                            diagrama_ideario: { type: \"OBJECT\", properties: { titulo_ideario: { type: \"STRING\" }, descricao_ideario: { type: \"STRING\" } } }\n                        }\n                    }\n                },\n                required: [\"nota_final\", \"resumo_geral\", \"competencias\", \"analise_gramatical\", \"arquitetura_argumentacao\"]\n            };\n            const payload = {contents: [{ role: \"user\", parts: [{ text: prompt }] }],generationConfig: { responseMimeType: \"application/json\", responseSchema: schema }};\n            return callApiWithSchema(payload);\n        }\n        \n        // --- FUNÇÕES DE RENDERIZAÇÃO ---\n        function renderTheme(data) {\n            essayThemeInput.value = data.tema;\n            essayText.value = ''; // Garante que o campo da redação fique limpo\n            essayText.placeholder = 'Agora que você tem o tema, pode começar a escrever sua redação aqui...';\n            essayThemeInput.dispatchEvent(new Event('input'));\n        }\n\n        function renderArguments(data) {\n            let argsHTML = `<div class=\"flex justify-between items-center mb-6\"><h3 class=\"text-2xl font-bold text-purple-700\">✨ Brainstorm de Argumentos</h3><button class=\"close-modal-btn text-3xl font-light text-slate-400 hover:text-slate-600\">&times;</button></div><div class=\"space-y-6\">`;\n            data.forEach((item, index) => {\n                argsHTML += `<div class=\"p-4 bg-slate-50 rounded-xl border border-slate-200\"><h4 class=\"font-bold text-lg text-slate-800\">Linha Argumentativa ${index + 1}</h4><p class=\"mt-1 text-slate-600\">${item.argumento}</p><div class=\"mt-3 pt-3 border-t border-dashed\"><p class=\"font-semibold text-purple-600\">Repertório Sugerido:</p><p class=\"text-slate-600\">${item.repertorio}</p></div></div>`;\n            });\n            argsHTML += `</div><div class=\"text-center mt-8\"><button class=\"close-modal-btn bg-purple-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-purple-700 transition\">Fechar</button></div>`;\n            brainstormContent.innerHTML = argsHTML;\n        }\n\n        function renderReport(data) {\n            let competencyHTML = '';\n            const competencyNames = [ 'Demonstrar domínio da modalidade escrita formal da língua portuguesa.', 'Compreender a proposta e aplicar conceitos das áreas de conhecimento.', 'Selecionar, relacionar, organizar e interpretar informações e argumentos.', 'Demonstrar conhecimento dos mecanismos linguísticos para a argumentação.', 'Elaborar proposta de intervenção para o problema, respeitando os direitos humanos.' ];\n            data.competencias.forEach((c, index) => {\n                 competencyHTML += `<div class=\"competency bg-slate-50 p-5 rounded-xl mb-4 border border-slate-200\"><div class=\"flex justify-between items-start mb-3\"><h4 class=\"font-bold text-blue-700 text-lg pr-4\">Competência ${c.id}</h4><span class=\"font-bold text-xl text-blue-600 bg-blue-100 px-3 py-1 rounded-full\">${c.nota} / 200</span></div><p class=\"text-slate-600 mb-4\">${competencyNames[index]}</p><div class=\"feedback mt-3 pl-4 border-l-4 border-green-500\"><p class=\"font-semibold text-green-700\">Pontos Fortes:</p><p class=\"text-slate-700\">${c.feedback.pontos_fortes}</p></div><div class=\"feedback mt-4 pl-4 border-l-4 border-red-500\"><p class=\"font-semibold text-red-700\">Pontos a Melhorar:</p><p class=\"text-slate-700\">${c.feedback.pontos_a_melhorar}</p></div></div>`;\n            });\n\n            // Geração do card \"Arquitetura da Argumentação\"\n            const arch = data.arquitetura_argumentacao;\n            let archHTML = `\n                <div class=\"competency-analysis mt-12\">\n                    <h3 class=\"text-2xl font-bold text-center mb-6 text-slate-700\">${arch.titulo || 'Arquitetura da Argumentação'}</h3>\n                    <div class=\"bg-slate-100 p-6 rounded-2xl border border-slate-200 space-y-8\">\n                        <div>\n                           <h4 class=\"font-bold text-lg text-slate-800\">O que sua redação tentou explicar?</h4>\n                           <p class=\"mt-2 text-slate-600\">${arch.resumo_tese}</p>\n                        </div>\n                        \n                        <!-- Diagrama 1: Mapa da Tese -->\n                        <div class=\"pt-6 border-t border-slate-300\">\n                             <h4 class=\"font-bold text-lg text-center text-slate-800 mb-4\">Diagrama: Mapa da Tese</h4>\n                             <div class=\"text-center p-4 rounded-lg diagram-box\">\n                                 <p class=\"font-semibold\">Tese Central:</p>\n                                 <p class=\"italic\">\"${arch.diagrama_tese.tese_central}\"</p>\n                             </div>\n                             <div class=\"text-center text-3xl text-slate-400 my-2\">↓</div>\n                             <div class=\"flex justify-around items-center gap-2\">\n                                ${arch.diagrama_tese.argumentos_principais.map(arg => `\n                                    <div class=\"diagram-connector\"></div>\n                                    <div class=\"p-3 text-center rounded-lg text-sm diagram-box w-1/3\">\n                                        <p class=\"font-semibold\">Argumento</p>\n                                        <p>${arg}</p>\n                                    </div>\n                                    <div class=\"diagram-connector\"></div>\n                                `).join('')}\n                             </div>\n                        </div>\n\n                        <!-- Diagrama 2: Pilares da Argumentação -->\n                        <div class=\"pt-6 border-t border-slate-300\">\n                            <h4 class=\"font-bold text-lg text-center text-slate-800 mb-4\">Diagrama: Pilares da Argumentação</h4>\n                            <div class=\"grid md:grid-cols-${arch.diagrama_pilares.length} gap-4\">\n                                ${arch.diagrama_pilares.map(pilar => `\n                                    <div class=\"p-4 rounded-lg bg-white shadow-sm border\">\n                                        <p class=\"font-bold text-center text-slate-700\">${pilar.pilar}</p>\n                                        <p class=\"mt-2 text-sm text-slate-600\">${pilar.resumo_pilar}</p>\n                                    </div>\n                                `).join('')}\n                            </div>\n                        </div>\n\n                        <!-- Diagrama 3: Espectro do Ideário -->\n                        <div class=\"pt-6 border-t border-slate-300\">\n                            <h4 class=\"font-bold text-lg text-center text-slate-800 mb-4\">Diagrama: Espectro do Ideário</h4>\n                            <div class=\"p-4 rounded-lg bg-white shadow-sm border\">\n                                <p class=\"font-bold text-center text-slate-700\">${arch.diagrama_ideario.titulo_ideario}</p>\n                                <p class=\"mt-2 text-sm text-center text-slate-600\">${arch.diagrama_ideario.descricao_ideario}</p>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            `;\n\n            reportSection.innerHTML = `<div class=\"header text-center border-b border-slate-200 pb-6 mb-8\"><h2 class=\"text-3xl font-bold text-slate-800\">Relatório de Desempenho da Redação</h2></div><div class=\"score-summary text-center mb-10\"><h3 class=\"text-xl font-semibold text-slate-600\">Sua Nota Final</h3><div class=\"score-circle inline-block my-4\"><div class=\"w-48 h-48 rounded-full bg-blue-600 text-white flex justify-center items-center flex-col shadow-2xl shadow-blue-300\"><span class=\"text-6xl font-bold\">${data.nota_final}</span><span class=\"text-lg font-medium\">/ 1000</span></div></div><p class=\"max-w-2xl mx-auto text-slate-600\">${data.resumo_geral}</p></div><div class=\"competency-analysis mb-10\"><h3 class=\"text-2xl font-bold text-center mb-6\">Análise por Competência</h3>${competencyHTML}</div> ${archHTML} <div class=\"charts text-center mt-12\"><h3 class=\"text-2xl font-bold text-center mb-6\">Visualização Gráfica</h3><div class=\"grid md:grid-cols-2 gap-8 items-center\"><div><h4 class=\"font-semibold text-lg mb-2\">Desempenho por Competência</h4><canvas id=\"competencyChart\"></canvas></div><div><h4 class=\"font-semibold text-lg mb-2\">Desvios Gramaticais Identificados</h4><canvas id=\"grammarChart\"></canvas></div></div></div><div class=\"text-center mt-12\"><button id=\"correct-new-btn\" class=\"bg-slate-700 text-white font-bold py-3 px-8 rounded-xl hover:bg-slate-800 transition duration-300 shadow-md\">Corrigir Nova Redação</button></div>`;\n            \n            document.getElementById('correct-new-btn').addEventListener('click', () => { reportSection.classList.add('hidden'); inputSection.classList.remove('hidden'); essayText.value = ''; essayThemeInput.value = ''; clearImageBtn.click(); });\n            renderCharts(data);\n        }\n        \n        function renderError(message) {\n            reportSection.innerHTML = `<div class=\"text-center bg-red-100 border border-red-400 text-red-700 px-4 py-6 rounded-xl\"><h3 class=\"font-bold text-xl\">Ocorreu um Erro</h3><p class=\"mt-2\">${message}</p><div class=\"text-center mt-6\"><button id=\"try-again-btn\" class=\"bg-red-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-red-700 transition\">Tentar Novamente</button></div></div>`;\n            document.getElementById('try-again-btn').addEventListener('click', () => { reportSection.classList.add('hidden'); inputSection.classList.remove('hidden'); });\n        }\n\n        function renderGenericModalError(message) {\n            return `<div class=\"flex justify-between items-center mb-6\"><h3 class=\"text-2xl font-bold text-red-700\">Erro</h3><button class=\"close-modal-btn text-3xl font-light text-slate-400 hover:text-slate-600\">&times;</button></div><p>${message}</p><div class=\"text-center mt-8\"><button class=\"close-modal-btn bg-red-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-red-700 transition\">Fechar</button></div>`;\n        }\n\n        function renderCharts(data) {\n            const competencyCtx = document.getElementById('competencyChart')?.getContext('2d');\n            if (competencyCtx) { new Chart(competencyCtx, { type: 'radar', data: { labels: ['C1', 'C2', 'C3', 'C4', 'C5'], datasets: [{ label: 'Sua Pontuação', data: data.competencias.map(c => c.nota), fill: true, backgroundColor: 'rgba(59, 130, 246, 0.2)', borderColor: 'rgb(59, 130, 246)', pointBackgroundColor: 'rgb(59, 130, 246)', pointBorderColor: '#fff', pointHoverBackgroundColor: '#fff', pointHoverBorderColor: 'rgb(59, 130, 246)' }] }, options: { elements: { line: { borderWidth: 3 } }, scale: { r: { angleLines: { display: true }, suggestedMin: 0, suggestedMax: 200, pointLabels: { font: { size: 14, weight: 'bold' } } } }, plugins: { legend: { display: false } } } }); }\n            const grammarCtx = document.getElementById('grammarChart')?.getContext('2d');\n            const grammarData = data.analise_gramatical.tipos_erros;\n            if (grammarCtx) { if (grammarData && grammarData.length > 0) { new Chart(grammarCtx, { type: 'doughnut', data: { labels: grammarData.map(e => e.tipo), datasets: [{ label: 'Quantidade', data: grammarData.map(e => e.quantidade), backgroundColor: ['#ef4444', '#f97316', '#eab308', '#84cc16', '#22c55e', '#10b981', '#14b8a6'], hoverOffset: 4 }] }, options: { responsive: true, plugins: { legend: { position: 'top' } } } }); } else { grammarCtx.canvas.parentNode.innerHTML = `<div class=\"flex flex-col items-center justify-center h-full bg-slate-50 rounded-xl p-4 border border-slate-200\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-16 w-16 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" /></svg><p class=\"mt-4 font-semibold text-slate-700\">Excelente!</p><p class=\"text-slate-500\">Nenhum desvio gramatical foi encontrado.</p></div>`; } }\n        }\n    </script>\n</body>\n</html>\n"
  },
  {
    "id": "tool-1750037550295-6ptxc2s",
    "fileName": "Sintetizador_Dial_tico_Avan_ado.js",
    "toolName": "Articulador Dialético",
    "toolObjective": "Gerar artigos através de debate simulado entre especialistas de IA.",
    "toolDescription": "Uma máquina que orquestra um debate virtual entre múltiplos agentes de IA sobre um tema definido, utilizando princípios de análise profunda, e sintetiza as discussões em um artigo final detalhado.",
    "fullHtmlContent": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>🧠 Articulador Dialético - Gerador de Artigos por Debate</title>\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js\"></script>\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n  <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Roboto+Mono:wght@400;500&display=swap\" rel=\"stylesheet\" />\n  <style>\n    body { font-family: 'Inter', sans-serif; background-color: #030712; color: #d1d5db; scroll-behavior: smooth; }\n    .font-mono { font-family: 'Roboto Mono', monospace; }\n    .glass-card { background: rgba(17, 24, 39, 0.6); backdrop-filter: blur(12px); border: 1px solid rgba(55, 65, 81, 0.4); }\n    .agent-card { transition: all 0.3s ease-in-out; border-left-width: 4px; }\n    .agent-card:hover { transform: translateY(-4px); box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); }\n    \n    /* Estilos para a visualização do artigo final, que agora é um iframe */\n    #final-article-frame {\n        width: 100%;\n        height: 80vh; /* Altura generosa para o artigo */\n        border: 1px solid #374151; /* gray-700 */\n        border-radius: 0.5rem;\n        background-color: #ffffff;\n        animation: fadeInAndScale 0.8s ease-out forwards;\n    }\n    \n    @keyframes fadeInAndScale { from { opacity: 0; transform: scale(0.98); } to { opacity: 1; transform: scale(1); } }\n  </style>\n</head>\n<body>\n  <div class=\"max-w-6xl mx-auto p-8\">\n    <header class=\"text-center mb-10\">\n      <h1 class=\"text-5xl font-bold bg-clip-text text-transparent bg-gradient-to-br from-purple-400 via-pink-500 to-orange-400\">Articulador Dialético</h1>\n      <p class=\"text-gray-400 mt-2 text-lg\">Máquina de Geração de Artigos Baseada em Debate Simulado</p>\n    </header>\n\n    <!-- Seção de Configuração do Debate -->\n    <section id=\"config-section\" class=\"glass-card p-6 mb-8 rounded-xl shadow-lg\">\n      <form id=\"form\">\n        <div class=\"mb-6\">\n            <label for=\"input\" class=\"block text-xl font-semibold mb-3 text-gray-200\">1. Tema do Debate</label>\n            <textarea id=\"input\" rows=\"3\" class=\"w-full bg-gray-900 border border-gray-700 rounded-lg p-3 font-mono placeholder-gray-500 text-gray-300\" placeholder=\"Ex: A soberania nacional na era da inteligência artificial global...\"></textarea>\n        </div>\n\n        <div>\n            <div class=\"flex justify-between items-center mb-4\">\n                <h2 class=\"text-xl font-semibold text-gray-200\">2. Painel de Debate (Até 10 Especialistas)</h2>\n                <button type=\"button\" id=\"generatePanelBtn\" class=\"bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-4 rounded-lg transition text-sm\">✨ Gerar Painel de Especialistas</button>\n            </div>\n            <div id=\"agent-editor\" class=\"space-y-4\"></div>\n            <div class=\"mt-4 flex gap-4\">\n                <button type=\"button\" id=\"addAgentBtn\" class=\"bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg transition text-sm\">Adicionar Debatedor</button>\n            </div>\n        </div>\n\n        <button id=\"submitBtn\" type=\"submit\" class=\"mt-8 w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 rounded-lg disabled:bg-gray-500 disabled:cursor-wait\">Iniciar Debate e Gerar Artigo</button>\n      </form>\n    </section>\n\n    <!-- Seções de Status e Resultados -->\n    <section id=\"timeline-container\" class=\"hidden\">\n        <section id=\"status\" class=\"glass-card p-6 mb-6 rounded-xl\">\n          <h2 class=\"text-xl font-bold text-gray-200 mb-2\">Status da Orquestração:</h2>\n          <p id=\"statusText\" class=\"font-mono text-yellow-300\"></p>\n        </section>\n        <section id=\"rounds\" class=\"space-y-8\"></section>\n    </section>\n    \n    <section id=\"final\" class=\"mt-8 hidden\">\n      <h2 class=\"text-3xl font-bold text-gray-200 mb-4 text-center\">Artigo Final Gerado</h2>\n      <div id=\"final-article-container\">\n          <iframe id=\"final-article-frame\"></iframe>\n      </div>\n      <div id=\"final-actions\" class=\"mt-6 flex flex-col sm:flex-row gap-4 justify-center\"></div>\n    </section>\n  </div>\n\n  <script>\n    const markdownConverter = new showdown.Converter();\n    let agents = [];\n    let fullArticleHtmlForDownload = ''; // Váriavel global para guardar o HTML do artigo\n\n    // --- FUNÇÕES DE GESTÃO DA UI ---\n    \n    function renderAgentInputs() {\n        const editor = document.getElementById('agent-editor');\n        editor.innerHTML = '';\n        agents.forEach((agent, index) => {\n            const d
